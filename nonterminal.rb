# frozen_string_literal: true

require './lexeme'
require './rule'

# a NonTerminal is a Lexeme generated by the parser.
# It represents an inner node or the root of the abstract
# syntax tree. Rules checking is handled entirely by the parser.
class NonTerminal < Lexeme
  attr_reader :rule, :children, :type

  # rule is the reduction rule that has been applied.
  # It's used by the parser when making further reductions.
  # children is an ordered array that shows the break down
  # of the non-terminal.
  # elements of children must be Lexemes.
  def initialize(rule, children)
    super()
    @rule = rule
    @type = rule.lht
    all_lexemes = true

    children.each do |child|
      all_lexemes = false unless child.is_a? Lexeme
    end

    raise ArgumentError.new, 'non-lexeme items passed to NonTerminal' unless all_lexemes

    @children = children.clone
  end

  def to_s
    "< rule: #{rule}, type: '#{type}', children: #{children} >"
  end
end
